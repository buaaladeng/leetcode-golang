使用栈实现队列的下列操作：

push(x) -- 将一个元素放入队列的尾部。
pop() -- 从队列首部移除元素。
peek() -- 返回队列首部的元素。
empty() -- 返回队列是否为空。
示例:

MyQueue queue = new MyQueue();

queue.push(1);
queue.push(2);  
queue.peek();  // 返回 1
queue.pop();   // 返回 1
queue.empty(); // 返回 false


type MyQueue struct {
	list1 []int
	list2 []int
}


/** Initialize your data structure here. */
func Constructor() MyQueue {
	return MyQueue{}
}


/** Push element x to the back of queue. */
func (this *MyQueue) Push(x int)  {
	this.list1 = append(this.list1,x)
}


/** Removes the element from in front of queue and returns that element. */
func (this *MyQueue) Pop() int {
	res := 0
	if len(this.list2)  ==  0 {
		this.list2 = this.list1
		this.list1 = make([]int,0)
	}
	if len(this.list2) > 0 {
		 res = this.list2[0]
		this.list2 = this.list2[1:]
	}
	return res
}


/** Get the front element. */
func (this *MyQueue) Peek() int {
	if len(this.list2) == 0{
		this.list2 = this.list1
		this.list1 = make([]int,0)
		
	}
return this.list2[0]
}


/** Returns whether the queue is empty. */
func (this *MyQueue) Empty() bool {
	return len(this.list1) == 0 && len(this.list2) == 0
}
