给定一个无重复元素的有序整数数组，返回数组区间范围的汇总。

示例 1:

输入: [0,1,2,4,5,7]
输出: ["0->2","4->5","7"]
解释: 0,1,2 可组成一个连续的区间; 4,5 可组成一个连续的区间。
示例 2:

输入: [0,2,3,4,6,8,9]
输出: ["0","2->4","6","8->9"]
解释: 2,3,4 可组成一个连续的区间; 8,9 可组成一个连续的区间。


func summaryRanges(nums []int) []string {
	res := make([]string,0)
	n := len(nums)
	if n == 0{
		return res
	}
	start := 0
	end := start+1
	for end < n{
		if nums[end] - nums[end-1] == 1 {
			end++
			continue
		}
		one := strconv.Itoa(nums[start])
		if end != start +1 {
			one += "->"
			one += strconv.Itoa(nums[end-1])
		}
		res = append(res,one)
		start = end
		end = start+1
	}
	one := strconv.Itoa(nums[start])
    if end != start +1 {
    one += "->"
    one += strconv.Itoa(nums[end-1])
    }
	res = append(res,one)
	return res
}


func summaryRanges(nums []int) []string {
	res := make([]string,0)
	n:=len(nums)
	if n == 0{
		return res
	}
	if n == 1{
		return append(res,strconv.Itoa(nums[0]))
	}
	start := nums[0]
	to := start
	for i:=1;i<n;i++{
		if nums[i] == to + 1{
			to++
		}else {
			res = append(res,getStr(start,to))
			start = nums[i]
			to = start
		}
	}
	res = append(res,getStr(start,to))
	return res
}

func getStr(start,to int)string{
	if start == to{
		return strconv.Itoa(to)
	}else {
		return strconv.Itoa(start) +  "->" + strconv.Itoa(to)
	}
}





