func minDepth(root *TreeNode) int {
	if root == nil{
		return 0
	}
	stack := make([]*TreeNode,0)
	stack = append(stack,root)
	res := 1
	for len(stack) > 0 {
		n := len(stack)
		for i:=0;i<n;i++{
			one := stack[0]
			stack = stack[1:]
			if one.Left == nil && one.Right == nil{
				return res
			}
			if one.Left!=nil{
				stack = append(stack,one.Left)
			}
			if one.Right!=nil{
				stack = append(stack,one.Right)
			}
		}
		res++
	}
	return res
}


func minDepth(root *TreeNode) int {
	if root == nil{
		return 0
	}
	if root.Right == nil && root.Left == nil{
		return 1
	}
	min := math.MaxInt32
	if root.Left != nil{
		min = minInt(minDepth(root.Left),min)
	}
	if root.Right != nil{
		min = minInt(minDepth(root.Right),min)
	}
	return min+1
}
func minInt(a,b int)int{
	if a>b{
		return b
	}else {
		return a
	}
}
