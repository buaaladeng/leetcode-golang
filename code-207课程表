你这个学期必须选修 numCourse 门课程，记为 0 到 numCourse-1 。

在选修某些课程之前需要一些先修课程。 例如，想要学习课程 0 ，你需要先完成课程 1 ，我们用一个匹配来表示他们：[0,1]

给定课程总量以及它们的先决条件，请你判断是否可能完成所有课程的学习？

 

示例 1:

输入: 2, [[1,0]] 
输出: true
解释: 总共有 2 门课程。学习课程 1 之前，你需要完成课程 0。所以这是可能的。
示例 2:

输入: 2, [[1,0],[0,1]]
输出: false
解释: 总共有 2 门课程。学习课程 1 之前，你需要先完成​课程 0；并且学习课程 0 之前，你还应先完成课程 1。这是不可能的。


//BFS

func canFinish(numCourses int, prerequisites [][]int) bool {
	list := make([]int,numCourses)
	for i:=0;i<len(prerequisites);i++{
		list[prerequisites[i][1]] += 1
	}
	queue := make([]int,0)
	for i:=0;i<numCourses;i++{
		if list[i] == 0{
			queue = append(queue,i)
		}
	}
	for len(queue)>0{
		pre := queue[0]
		queue = queue[1:]
		numCourses--
		for _,val := range prerequisites{
			if val[0] == pre{
				list[val[1]]--
				if list[val[1]] == 0{
					queue = append(queue,val[1])
				}
			}
		}

	}
	return numCourses == 0
}


//DFS

func canFinish(numCourses int, prerequisites [][]int) bool {

	nums := make([][]int,numCourses)
	for i:=0;i<numCourses;i++{
		nums[i] = make([]int,numCourses)
	}
	for i:=0;i<len(prerequisites);i++{
		nums[prerequisites[i][0]][prerequisites[i][1]] = 1
	}
	stack := make([]int,numCourses)
	for i:=0;i<numCourses;i++{
		if !dfs207(nums,stack,i){
			return false
		}
	}
	return true
}

func dfs207(nums [][]int,tmp []int, start int) bool{
	if tmp[start] == -1{
		return true
	}
	if tmp[start] == 1{
		return false
	}
	tmp[start] = 1
	for i:=0;i<len(nums);i++{
		if nums[start][i] == 1 && !dfs207(nums,tmp,i) {
			return false
		}
	}
	tmp[start] = -1
	return true
}
