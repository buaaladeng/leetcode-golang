func isBalanced(root *TreeNode) bool {
	if root == nil{
		return true
	}
	left := maxDepth(root.Left)
	right := maxDepth(root.Right)
	dif := left - right
	dif = absInt(dif)
	return dif <=1 && isBalanced(root.Left) && isBalanced(root.Right)
}


func maxDepth(root *TreeNode) int {
	if root == nil{
		return 0
	}
	stack := make([]*TreeNode,0)
	stack = append(stack,root)
	res := 0
	for len(stack)>0{
		n := len(stack)
		for i:=0;i<n;i++{
			one := stack[i]
			if one.Left != nil {
				stack = append(stack,one.Left)
			}
			if one.Right!= nil{
				stack = append(stack,one.Right)
			}
		}
		stack = stack[n:]
		res++
	}
	return res
}

func absInt(a int)int{
	if a<0{
		a = -a
	}
	return a
}
