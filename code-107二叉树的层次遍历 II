给定一个二叉树，返回其节点值自底向上的层次遍历。 （即按从叶子节点所在层到根节点所在的层，逐层从左向右遍历）

例如：
给定二叉树 [3,9,20,null,null,15,7],

    3
   / \
  9  20
    /  \
   15   7
返回其自底向上的层次遍历为：

[
  [15,7],
  [9,20],
  [3]
]

func levelOrderBottom(root *TreeNode) [][]int {
	res := make([][]int,0)
	if root == nil{
		return res
	}
	stack := make([]*TreeNode,0)
	stack = append(stack,root)
	for len(stack)>0{
		n := len(stack)
		tmp := make([]int,n)
		for i:=0;i<n;i++{
			one := stack[i]
			if one.Left != nil {
				stack = append(stack,one.Left)
			}
			if one.Right!= nil{
				stack = append(stack,one.Right)
			}
			tmp[i]=one.Val
			

		}
		stack = stack[n:]
		res = append(res,tmp)
	}
	for i:=0;i<len(res)/2;i++{
		res[i],res[len(res)-1-i] = res[len(res)-1-i],res[i]
	}
	return res
}
