1,递归算法
func preorder(root *Node) []int {
	res := make([]int,0)
	if root == nil{
		return res
	}
	res = append(res,root.Val)
	n :=len(root.Children) 
	for i:=0;i<n;i++{
		res = append(res,preorder(root.Children[i])...)
	}
	return res
}

2，迭代算法
func preorder(root *Node) []int {
	res := make([]int,0)
	if root == nil{
		return res
	}
	stack := make([]*Node,0)
	stack = append(stack,root)
	for len(stack)>0{
		root := stack[len(stack)-1]
		stack = stack[:len(stack)-1]
		res = append(res,root.Val)
		for i:=len(root.Children)-1;i>=0;i--{
			stack = append(stack,root.Children[i])
		}
	}
	return res
}
