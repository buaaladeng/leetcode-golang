给定一个二叉树，它的每个结点都存放一个 0-9 的数字，每条从根到叶子节点的路径都代表一个数字。

例如，从根到叶子节点路径 1->2->3 代表数字 123。

计算从根到叶子节点生成的所有数字之和。

说明: 叶子节点是指没有子节点的节点。

示例 1:

输入: [1,2,3]
    1
   / \
  2   3
输出: 25
解释:
从根到叶子节点路径 1->2 代表数字 12.
从根到叶子节点路径 1->3 代表数字 13.
因此，数字总和 = 12 + 13 = 25.
示例 2:

输入: [4,9,0,5,1]
    4
   / \
  9   0
 / \
5   1
输出: 1026
解释:
从根到叶子节点路径 4->9->5 代表数字 495.
从根到叶子节点路径 4->9->1 代表数字 491.
从根到叶子节点路径 4->0 代表数字 40.
因此，数字总和 = 495 + 491 + 40 = 1026.

// 递归
func sumNumbers(root *TreeNode) int {
	if root == nil{
		return 0
	}
	nums := make([]int,0)
	stack := make([]*TreeNode,0)
	res := 0
	stack = append(stack,root)
	nums = append(nums,root.Val)
	for len(stack)>0{
		n := len(stack)
		for i:=0;i<n;i++{
			one := stack[0]
			stack = stack[1:]
			num := nums[0]
			nums = nums[1:]
			if one.Left==nil && one.Right==nil{
				res += num
			}
			if one.Left!=nil {
				nums = append(nums,num*10 + one.Left.Val)
				stack = append(stack,one.Left)
			}
			if one.Right!=nil{
				nums = append(nums,num*10 + one.Right.Val)
				stack = append(stack,one.Right)
			}
            
		}
	}
	return res
}

// 迭代
func sumNumbers(root *TreeNode) int {
	return sum(root,0)

}
func sum(root *TreeNode,s int)int{
	if root == nil{
		return 0
	}
	if root.Right == nil && root.Left == nil{
		return s * 10 + root.Val
	}
	return sum(root.Left,s * 10 + root.Val) + sum(root.Right,s * 10 + root.Val)
}
