给定两个字符串 s 和 t，判断它们是否是同构的。

如果 s 中的字符可以被替换得到 t ，那么这两个字符串是同构的。

所有出现的字符都必须用另一个字符替换，同时保留字符的顺序。两个字符不能映射到同一个字符上，但字符可以映射自己本身。

示例 1:

输入: s = "egg", t = "add"
输出: true
示例 2:

输入: s = "foo", t = "bar"
输出: false
示例 3:

输入: s = "paper", t = "title"
输出: true



func isIsomorphic(s string, t string) bool {
	n1 := len(s)
	n2 := len(t)
	if n1!=n2 {
		return false
	}
	stack1 :=getStack(s)
	stack2 :=getStack(t)
	for i:=0;i<n1;i++{
		if stack1[i]!=stack2[i]{
			return false
		}
	}
	return true
}

func getStack(s string) []int{
	n1 := len(s)
	stack1 :=make([]int,n1)
	hashmap := make(map[byte]int)
	index := 1
	for i:=0;i<n1;i++{
		if hashmap[s[i]] == 0{
			hashmap[s[i]] = index
			index++
		}
		stack1[i] = hashmap[s[i]]
	}
	return stack1
}



func isIsomorphic(s string, t string) bool {
	n1 := len(s)
	n2 := len(t)
	if n1!=n2 {
		return false
	}
	stack1 := make([]int,128)
	stack2 := make([]int,128)
	for i:=0;i<n1;i++{
		stack1[s[i]] += i+1
		stack2[t[i]] += i+1
		if stack1[s[i]]!=stack2[t[i]]{
			return false
		}
	}
	return true
}
