type SortedStack struct {
	list1 []int
	list2 []int
}


func Constructor() SortedStack {
	return SortedStack{}
}


func (this *SortedStack) Push(val int)  {
	if len(this.list1) == 0 || val < this.list1[len(this.list1)-1]{
		this.list1 = append(this.list1,val)
	}else {
		for len(this.list1) >0 && val > this.list1[len(this.list1)-1]{
			this.list2 = append(this.list2,this.list1[len(this.list1)-1])
			this.list1 = this.list1[:len(this.list1)-1]
		}
		this.list1 = append(this.list1,val)
		for len(this.list2) >0{
			this.list1 = append(this.list1,this.list2[len(this.list2)-1])
			this.list2 = this.list2[:len(this.list2)-1]
		}
	}
}


func (this *SortedStack) Pop()  {
    if len(this.list1) == 0 {
		return 
	}
	this.list1 = this.list1[:len(this.list1)-1]
}


func (this *SortedStack) Peek() int {
	if len(this.list1) == 0 {
		return -1
	}
	return this.list1[len(this.list1)-1]
}


func (this *SortedStack) IsEmpty() bool {
	return len(this.list1) == 0
}
