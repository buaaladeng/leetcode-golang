func sortedListToBST(head *ListNode) *TreeNode {
	root := new(TreeNode)
	if head == nil{
		return nil
	}
	if head.Next == nil{
		root.Val = head.Val
		return root
	}
	fast := head
	slow := head
	for fast!=nil && fast.Next!=nil{
		slow = slow.Next
		fast = fast.Next.Next
	}
	pre := head
	for pre.Val !=slow.Val && pre.Next.Val!=slow.Val {
		pre = pre.Next
	}
	pre.Next = nil
	root.Val = slow.Val
	root.Right = sortedListToBST(slow.Next)
	root.Left = sortedListToBST(head)
	return root
}




func sortedListToBST(head *ListNode) *TreeNode {
	return transMidToRoot(head, nil)
}

func transMidToRoot(begin, end *ListNode) *TreeNode {
	if begin == end {
		return nil
	}

	if begin.Next == end {
		return &TreeNode{Val: begin.Val}
	}

	fast, slow := begin, begin
	for fast != end && fast.Next != end {
		fast = fast.Next.Next
		slow = slow.Next
	}

	mid := slow

	return &TreeNode{
		Val:   mid.Val,
		Left:  transMidToRoot(begin, mid),
		Right: transMidToRoot(mid.Next, end),
	}
}

