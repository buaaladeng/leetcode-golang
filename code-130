func solve(board [][]byte)  {
	n:=len(board)
	if n == 0{
		return
	}
	m:=len(board[0])
	if m == 0{
		return
	}
	for i:=0;i<=n;i++{
		dfs130(board,i,0)
		dfs130(board,i,m-1)
	}
	for i:=0;i<=m;i++{
		dfs130(board,0,i)
		dfs130(board,n-1,i)
	}
	for i:=0;i<n;i++{
		for j:=0;j<m;j++{
			if board[i][j] == '+'{
				board[i][j] = 'O'
			}else if  board[i][j] == 'O'{
				board[i][j] = 'X'
			}
		}
	}
}

func dfs130(board [][]byte,i,j int){
	n:=len(board)
	m:=len(board[0])
	if i<0 || i>=n || j<0 || j>=m || board[i][j]!='O'{
		return
	}
	board[i][j]='+'
	dfs130(board,i+1,j)
	dfs130(board,i-1,j)
	dfs130(board,i,j+1)
	dfs130(board,i,j-1)
}	
