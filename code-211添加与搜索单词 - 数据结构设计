设计一个支持以下两种操作的数据结构：

void addWord(word)
bool search(word)
search(word) 可以搜索文字或正则表达式字符串，字符串只包含字母 . 或 a-z 。 . 可以表示任何一个字母。

示例:

addWord("bad")
addWord("dad")
addWord("mad")
search("pad") -> false
search("bad") -> true
search(".ad") -> true
search("b..") -> true


type WordDictionary struct {
	List [26]*WordDictionary
	End bool
}


/** Initialize your data structure here. */
func Constructor() WordDictionary {
	return WordDictionary{}
}


/** Adds a word into the data structure. */
func (this *WordDictionary) AddWord(word string)  {
	root := this
	for i:=0;i<len(word);i++{
		if root.List[word[i] - 'a'] == nil{
			root.List[word[i] - 'a'] = new(WordDictionary)
		}
		root =  root.List[word[i] - 'a']
	}
	root.End = true
}


/** Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. */
func (this *WordDictionary) Search(word string) bool {
	return search(this,word,0)
}

func search(this *WordDictionary, word string,start int) bool {
	root := this
	if root == nil{
		return false
	}
	if start == len(word){
		return root.End
	}
	if word[start] == '.'{
		for i:=0;i<26;i++{
			if root.List[i]!= nil && search(root.List[i],word,start+1){
				return true
			}
		}
		return false
	} else {
		return search(root.List[word[start]-'a'],word,start+1)
	}
	return false
}
