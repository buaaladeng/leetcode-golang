func getIntersectionNode(headA, headB *ListNode) *ListNode {
	p1 := headA
	p2 := headB
	n := 1
	m := 1
	for p1!=nil && p1.Next != nil{
		p1 = p1.Next
		n++
	}
	for p2!=nil && p2.Next != nil{
		p2 = p2.Next
		m++
	}
	if p1 != p2{
		return nil
	}
    p1 = headA
    p2 = headB
	if n<m{
	p1 = headB
    p2 = headA
    n,m = m,n
	}
	for i:=0;i<n-m;i++{
    
		p1 = p1.Next
	}
	for p1!=p2{
		p1 = p1.Next
		p2 = p2.Next
	}
	return p1

}

func getIntersectionNode(headA, headB *ListNode) *ListNode {
	if headA == nil ||  headB == nil{
		return nil
	}
	 p,q := headA,headB
	 pflag,qflag := false,false
	 for p != nil && q != nil{
	 	if p == q{
	 		return p
		}
        p = p.Next
	 	q = q.Next
	 	if p == nil && !pflag{
	 		p = headB
			pflag = true
		}
	 	if q == nil && !qflag{
	 		q = headA
	 		qflag = true
		}
	 }
	 return nil
}



