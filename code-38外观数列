「外观数列」是一个整数序列，从数字 1 开始，序列中的每一项都是对前一项的描述。前五项如下：

1.     1
2.     11
3.     21
4.     1211
5.     111221
1 被读作  "one 1"  ("一个一") , 即 11。
11 被读作 "two 1s" ("两个一"）, 即 21。
21 被读作 "one 2",  "one 1" （"一个二" ,  "一个一") , 即 1211。

给定一个正整数 n（1 ≤ n ≤ 30），输出外观数列的第 n 项。

注意：整数序列中的每一项将表示为一个字符串。

 

示例 1:

输入: 1
输出: "1"
解释：这是一个基本样例。
示例 2:

输入: 4
输出: "1211"
解释：当 n = 3 时，序列是 "21"，其中我们有 "2" 和 "1" 两组，"2" 可以读作 "12"，也就是出现频次 = 1 而 值 = 2；类似 "1" 可以读作 "11"。所以答案是 "12" 和 "11" 组合在一起，也就是 "1211"。


递归算法
func countAndSay(n int) string {
	res := ""
	if n == 1{
		return "1"
	}
	tmp := countAndSay(n-1)
	array := []byte(tmp)
	length := len(tmp)
	start := 0
	end := length-1
	count := 1
	for start<end{
		if array[start] == array[start+1]{
			count++
			start++
		}else {
			num := strconv.Itoa(count)
			res = res + (num + string(array[start]))
			count = 1
			start++
		}
	}
	res = res + (strconv.Itoa(count) + string(array[start]))
	return res
}


func countAndSay(n int) string {
	buf := []byte{'1'}

	for n > 1 {
		buf = say(buf)
		n--
	}

	return string(buf)
}

func say(buf []byte) []byte {
	res := make([]byte, 0)

	i, j := 0, 1
	for i < len(buf) {
		// 利用 j ，找到下一个不同的元素
		for j < len(buf) && buf[j] == buf[i] {
			j++
		}

		// res 中 res[i] 表示 res[i+1] 的个数，i 为0,2,4,6,...
		res = append(res, byte(j-i+'0'), buf[i])

		// 移动 i 到 j
		i = j
	}

	return res
}
