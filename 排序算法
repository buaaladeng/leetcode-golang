1，快排算法
func QuickSort(nums []int){
	quickSort(nums,0,len(nums)-1)
}



func quickSort(nums []int, l int, r int) {
	if l >= r {
		return
	}
		i := l
		j := r
		mid := (r + l) / 2
		index := nums[mid]
		for {
			for nums[i] < index {
				i++
			}
			for nums[j] > index {
				j--
			}
			if j <= i {
				break
			}
			nums[i],nums[j]=nums[j],nums[i]
		}
		quickSort(nums, l, i-1)
		quickSort(nums, i+1, r)
}

2，归并排序
func mergeSort(data []int) []int {
	if len(data) <= 1 {
		return data
	}
	//递[归]
	middle := len(data) / 2
	//不断地进行左右对半划分
	left := mergeSort(data[:middle])
	right := mergeSort(data[middle:])
	//合[并]
	return merge(left, right)
}
func merge(left, right []int) (result []int) {
	l, r := 0, 0
	for l < len(left) && r < len(right) {
		if left[l] > right[r] {
			result = append(result, right[r])
			r++
		} else {
			result = append(result, left[l])
			l++
		}
	}
	result = append(result, left[l:]...)
	result = append(result, right[r:]...)
	return
}

3，冒泡排序


