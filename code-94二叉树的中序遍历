给定一个二叉树，返回它的中序 遍历。

示例:

输入: [1,null,2,3]
   1
    \
     2
    /
   3

输出: [1,3,2]
进阶: 递归算法很简单，你可以通过迭代算法完成吗？



func inorderTraversal(root *TreeNode) []int {
	res := make([]int,0)
	stack := make([]*TreeNode,0)
	if root == nil{
		return res
	}
	for root != nil || len(stack)>0{
		for root!= nil{
			stack = append(stack,root)
			root = root.Left
		}
		root = stack[len(stack)-1]
		stack = stack[:len(stack)-1]
		res = append(res,root.Val)
		root = root.Right
	}
	return res
}

func inorderTraversal(root *TreeNode) []int {
	res := make([]int,0)
	if root == nil{
		return res
	}
	res = append(res,inorderTraversal(root.Left)...)
	res = append(res,root.Val)
	res = append(res,inorderTraversal(root.Right)...)
	return res
}
