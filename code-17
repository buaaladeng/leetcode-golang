/**
dfs
*/
unc letterCombinations(digits string) []string {
	res := make([]string,0)
	array := []byte(digits)
	n := len(digits)
	if n==0{
		return res
	}
	tmp := make([]byte,0)
	dfs17(array,&res,0,tmp)
	return res
}

func dfs17(array []byte,res *[]string, start int, tmp []byte){

	var dict = [...]string{"","","abc","def","ghi","jkl","mno","pqrs","tuv","wxyz"}
	if start>= len(array){
		tempCoyp := make([]byte,len(tmp))
		copy(tempCoyp,tmp)
		*res = append(*res,string(tempCoyp))
		return
	}
	num := array[start] - '0'
	str := dict[num]
	strArray := []byte(str)
	for _,one := range strArray{
		tmp = append(tmp,one)
		dfs17(array,res,start+1,tmp)
		tmp = tmp[:len(tmp)-1]
	}
}

/**
递归
*/

func letterCombinations(digits string) []string {
    	n := len(digits)
	result := make([]string,0)
	if n==0{
		return result
	}
	var dict = [...]string{"","","abc","def","ghi","jkl","mno","pqrs","tuv","wxyz"}
	tmp := letterCombinations(digits[1:n])
	now := dict[digits[0]-'0']

	for i:=0;i<len(now);i++{
		one := now[i:i+1]
		if len(tmp) == 0{
			result = append(result, one)
		}else {
			for j:=0;j<len(tmp);j++{
				result = append(result, one+tmp[j])
			}
		}
	}
	return result
}
