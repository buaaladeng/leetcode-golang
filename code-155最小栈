设计一个支持 push ，pop ，top 操作，并能在常数时间内检索到最小元素的栈。

push(x) —— 将元素 x 推入栈中。
pop() —— 删除栈顶的元素。
top() —— 获取栈顶元素。
getMin() —— 检索栈中的最小元素。
示例:

MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.getMin();   --> 返回 -3.
minStack.pop();
minStack.top();      --> 返回 0.
minStack.getMin();   --> 返回 -2.


type MinStack struct {
	stack []int
	mstack []int
}


/** initialize your data structure here. */
func Constructor() MinStack {
	min := MinStack{stack:make([]int,0),mstack:make([]int,0),}
	return min
}


func (this *MinStack) Push(x int)  {
	this.stack = append(this.stack,x)
	if len(this.mstack) == 0 || x < this.mstack[len(this.mstack)-1]{
		this.mstack = append(this.mstack,x)
	}else {
		this.mstack = append(this.mstack,this.mstack[len(this.mstack)-1])
	}
}


func (this *MinStack) Pop()  {
	this.stack = this.stack[:len(this.stack)-1]
  this.mstack = this.mstack[:len(this.mstack)-1]
}


func (this *MinStack) Top() int {
	return this.stack[len(this.stack)-1]
}


func (this *MinStack) GetMin() int {
	return this.mstack[len(this.mstack)-1]
}
