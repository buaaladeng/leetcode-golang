func trap(height []int) int {
	res := 0
	n := len(height)
	if n==0{
		return 0
	}
	stack := make([]int,0)
	for i:=0;i<n;i++{
		for len(stack)>0 && height[i]>height[stack[len(stack)-1]]{
			top := stack[len(stack)-1]
			stack = stack[:len(stack)-1]
			if len(stack) == 0{
				break
			}
			length := i-stack[len(stack)-1]-1
			width := minInt(height[i],height[stack[len(stack)-1]]) - height[top]
			res += length * width
		}
		stack = append(stack,i)
	}
	return res
}


/**
two pointers
 */
func trap2(height []int) int {
	n := len(height)
	if n==0{
		return 0
	}
	leftMax := 0
	rightMax := 0
	left := 0
	right := n-1
	res := 0
	for left<right{
		if height[left]<height[right]{
			if height[left]>=leftMax{
				leftMax = height[left]
			}
			res = res + (leftMax-height[left])
			left++
		}else{
			if height[right]>=rightMax{
				rightMax = height[right]
			}
			res = res + (rightMax - height[right])
			right--
		}
	}
	return res
}
/**
code-42
 */
func trap1(height []int) int {
	n := len(height)
	if n==0{
		return 0
	}
	left :=make([]int,n)
	right :=make([]int,n)
	left[0]=height[0]
	for i:=1;i<n;i++{
		left[i] = maxInt(left[i-1],height[i])
	}
	right[n-1] = height[n-1]
	for i:=n-2;i>=0;i--{
		right[i] = maxInt(right[i+1],height[i])
	}
	res :=0

	for i:=1;i<n-1;i++{
		res +=(maxInt(0,minInt(left[i],right[i])-height[i]))
	}
	return res
}
