比较两个版本号 version1 和 version2。
如果 version1 > version2 返回 1，如果 version1 < version2 返回 -1， 除此之外返回 0。

你可以假设版本字符串非空，并且只包含数字和 . 字符。

 . 字符不代表小数点，而是用于分隔数字序列。

例如，2.5 不是“两个半”，也不是“差一半到三”，而是第二版中的第五个小版本。

你可以假设版本号的每一级的默认修订版号为 0。例如，版本号 3.4 的第一级（大版本）和第二级（小版本）修订号分别为 3 和 4。其第三级和第四级修订号均为 0。
 

示例 1:

输入: version1 = "0.1", version2 = "1.1"
输出: -1
示例 2:

输入: version1 = "1.0.1", version2 = "1"
输出: 1
示例 3:

输入: version1 = "7.5.2.4", version2 = "7.5.3"
输出: -1
示例 4：

输入：version1 = "1.01", version2 = "1.001"
输出：0
解释：忽略前导零，“01” 和 “001” 表示相同的数字 “1”。
示例 5：

输入：version1 = "1.0", version2 = "1.0.0"
输出：0
解释：version1 没有第三级修订号，这意味着它的第三级修订号默认为 “0”。
 

提示：

版本字符串由以点 （.） 分隔的数字字符串组成。这个数字字符串可能有前导零。
版本字符串不以点开始或结束，并且其中不会有两个连续的点。


func compareVersion(version1 string, version2 string) int {
	array1 := strings.Split(version1,".")
	array2 := strings.Split(version2,".")
	n1:=len(array1)
	n2:=len(array2)
	if n1>n2{
		m := n1-n2
		for m>0{
			array2 = append(array2,"0")
			m--
		}
	} else {
		m := n2-n1
		for m>0{
			array1 = append(array1,"0")
			m--
		}
	}
	for i:=0;i<len(array2);i++{
		num1 := getNum(array1[i])
		num2 := getNum(array2[i])
		if num1< num2{
			return -1
		}else if num1 > num2{
			return 1
		}
	}
	return 0
}

func getNum(str string) int {
	res := 0
	for i:=0;i<len(str);i++{
		res = res*10 + int(str[i]-'0')
	}
	return res
}




func compareVersion(version1 string, version2 string) int {
	m := len(version1)
	n := len(version2)
	i,j:=0,0
	for i<m && j <n{
		num1,num2:=0,0
		for i<m && version1[i]!='.'{
			num1 = num1 *10 + int((version1[i] - '0'))
			i++
		}
		for j <n && version2[j]!='.'{
			num2 = num2 *10 + int((version2[j] - '0'))
			j++
		}
		if num2 > num1{
			return -1
		}else if num1 > num2{
			return 1
		}else {
			i++
			j++
		}
	}

	for i<m{
		left :=0
		for i<m && version1[i]!='.'{
			left = left *10 + int((version1[i] - '0'))
			i++
		}
		if left>0{
			return 1
		}
		i++
	}
	for j<n{
		left :=0
		for j<n && version2[j]!='.'{
			left = left *10 + int((version2[j] - '0'))
			j++
		}
		if left>0{
			return -1
		}
		j++
	}
	return 0
}
