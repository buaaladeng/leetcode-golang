 给定一个整数 n，生成所有由 1 ... n 为节点所组成的二叉搜索树。

示例:

输入: 3
输出:
[
  [1,null,3,2],
  [3,2,null,1],
  [3,1,null,null,2],
  [2,1,3],
  [1,null,2,null,3]
]
解释:
以上的输出对应以下 5 种不同结构的二叉搜索树：

   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3


 
 
 func generateTrees(n int) []*TreeNode {
	res := make([]*TreeNode,0)
	if n < 1{
		return res
	}
	res = generate(1,n)
	return res
}

func generate(start,end int)[]*TreeNode{
	res := make([]*TreeNode,0)
	if start > end{
		res = append(res,nil)
		return res
	}
	for i:=start;i<=end;i++{
		left := generate(start,i-1)
		right := generate(i+1,end)
		for _,oneLeft:=range left{
			for _,oneRight := range right{
				root := new(TreeNode)
				root.Val = i
				root.Left = oneLeft
				root.Right = oneRight
				res = append(res,root)
			}

		}
	}
	return res

}
