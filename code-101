//递归
func isSymmetric(root *TreeNode) bool {
	if root == nil{
		return true
	}
	return symmetric(root.Left,root.Right)
}
func symmetric(left,right *TreeNode) bool{
	if left == nil && right == nil{
		return true
	}
	if left == nil || right == nil{
		return false
	}
	return left.Val == right.Val && symmetric(left.Left,right.Right) &&
		symmetric(left.Right,right.Left)
}

//迭代
func isSymmetric(root *TreeNode) bool {
	if root == nil{
		return true
	}
	stack:=make([]*TreeNode,0)
	stack = append(stack,root)
	stack = append(stack,root)
	for len(stack)>0{
		left:=stack[len(stack)-1]
		stack = stack[:len(stack)-1]
		right:=stack[len(stack)-1]
		stack = stack[:len(stack)-1]
		if left == nil && right == nil{
			continue
		}
		if left == nil || right == nil{
			return false
		}
		if left.Val != right.Val{
			return false
		}
		stack = append(stack,left.Left)
		stack = append(stack,right.Right)
		stack = append(stack,left.Right)
		stack = append(stack,right.Left)
	}
	return true

}
