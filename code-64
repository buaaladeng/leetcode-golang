//本题参考63题，思路一模一样
func minPathSum(grid [][]int) int {
	n := len(grid)
	m := len(grid[0])
	for i:=1;i<n;i++{
		grid[i][0] += grid[i-1][0]
	}
	for i:=1;i<m;i++{
		grid[0][i] += grid[0][i-1]
	}
	for i:=1;i<n;i++{
		for j:=1;j<m;j++{
			grid[i][j] += minInt(grid[i-1][j],grid[i][j-1])
		}
	}
	return grid[n-1][m-1]
}

func minInt(a,b int)int{
	if a>b{
		return b
	}else {
		return a
	}
}

func minPathSum(grid [][]int) int {
    	m := len(grid)
	n := len(grid[0])
	for i:=m-1;i>=0;i--{
		for j:=n-1;j>=0;j--{
			if i == m-1 && j != n-1{
				grid[i][j] += grid[i][j+1]
			}else if i != m-1 && j == n-1{
				grid[i][j] += grid[i+1][j]
			}else if i!= m-1 && n!= n-1{
				grid[i][j] += int(math.Min(float64(grid[i+1][j]), float64(grid[i][j+1])))
			}
		}
	}
	return grid[0][0]
}
