func buildTree(inorder []int, postorder []int) *TreeNode {
	root := new(TreeNode)
	m := len(postorder)
	n := len(inorder)
	if m == 0 && n == 0{
		return nil
	}
	root.Val = postorder[m-1]
	index := 0
	for i:=0;i<n;i++{
		if inorder[i] == postorder[m-1]{
			index = i
			break
		}
	}
	root.Left = buildTree(inorder[:index],postorder[:index])
	root.Right = buildTree(inorder[index+1:],postorder[index:m-1])
	return root
}


func buildTree(inorder []int, postorder []int) *TreeNode {
	return buildOnerTree(inorder,0,len(inorder)-1,postorder,0,len(postorder)-1)
}

func buildOnerTree(inorder []int,il int,ir int, postorder []int,pl int,pr int) *TreeNode {
	if il>ir || pl>pr{
		return nil
	}
	mid := postorder[pr]
	midind := il
	for key,val:=range inorder{
		if val == mid{
			midind = key
		}
	}
	root := new(TreeNode)
	root.Val = mid

	root.Left =  buildOnerTree(inorder,il,midind-1,postorder,pl,pr+midind-ir-1)
	root.Right = buildOnerTree(inorder,midind+1,ir,postorder,pr+midind-ir,pr-1)
	return root
}
