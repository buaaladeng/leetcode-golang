给定一个字符串 s，将 s 分割成一些子串，使每个子串都是回文串。

返回 s 所有可能的分割方案。

示例:

输入: "aab"
输出:
[
  ["aa","b"],
  ["a","a","b"]
]




func partition(s string) [][]string {
	res := make([][]string,0)
	n := len(s)
	if n == 0{
		return res
	}
	tmp := make([]string,0)
	dfs131(s,&res,tmp,0)
	return res
}
func dfs131(s string,res *[][]string,tmp []string,start int){
	if start == len(s){
		one := make([]string,len(tmp))
		copy(one,tmp)
		*res = append(*res,one)
		return
	}
	for i:=start;i<len(s);i++{
		if ishuiwen(string(s[start:i+1])){
			tmp = append(tmp,string(s[start:i+1]))
			dfs131(s,res,tmp,i+1)
			tmp = tmp[:len(tmp)-1]
		}
	}

}

func ishuiwen(s string)bool{
	n:=len(s)
	i:=0
	j:=n-1
	for i<j{
		if s[i]!=s[j]{
			return false
		}
		i++
		j--
	}
	return true
}
