给定一个二叉搜索树，编写一个函数 kthSmallest 来查找其中第 k 个最小的元素。

说明：
你可以假设 k 总是有效的，1 ≤ k ≤ 二叉搜索树元素个数。

示例 1:

输入: root = [3,1,4,null,2], k = 1
   3
  / \
 1   4
  \
   2
输出: 1
示例 2:

输入: root = [5,3,6,2,4,null,null,1], k = 3
       5
      / \
     3   6
    / \
   2   4
  /
 1
输出: 3


func kthSmallest(root *TreeNode, k int) int {
	res := make([]int,0)
	stack := make([]*TreeNode,0)
	stack =append(stack,root)
	for root != nil || len(stack)>0{

		for root!=nil{
			stack = append(stack,root)
			root = root.Left
		}
		root = stack[len(stack)-1]
		stack = stack[:len(stack)-1]
		res = append(res,root.Val)
		root = root.Right
	}
	return res[k-1]
}


 func kthSmallest(root *TreeNode, k int) int {
	res := 0
	if root == nil{
		return res
	}
	stack := make([]*TreeNode,0)
	for root != nil || len(stack) > 0{
		if root != nil{
			stack = append(stack, root)
            root = root.Left
		}else {
            root = stack[len(stack)-1]
			stack = stack[:len(stack)-1]
			k--
			if k == 0{
				return root.Val
			}
			root =  root.Right
		}
	}
	return res
}

