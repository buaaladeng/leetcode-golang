实现一个二叉搜索树迭代器。你将使用二叉搜索树的根节点初始化迭代器。

调用 next() 将返回二叉搜索树中的下一个最小的数。

 

示例：



BSTIterator iterator = new BSTIterator(root);
iterator.next();    // 返回 3
iterator.next();    // 返回 7
iterator.hasNext(); // 返回 true
iterator.next();    // 返回 9
iterator.hasNext(); // 返回 true
iterator.next();    // 返回 15
iterator.hasNext(); // 返回 true
iterator.next();    // 返回 20
iterator.hasNext(); // 返回 false
 

提示：

next() 和 hasNext() 操作的时间复杂度是 O(1)，并使用 O(h) 内存，其中 h 是树的高度。
你可以假设 next() 调用总是有效的，也就是说，当调用 next() 时，BST 中至少存在一个下一个最小的数。


// 两种思路
1，利用栈维护搜索树的中序遍历值，进行值处理
2，利用栈维护搜索树的节点，进行节点处理


type BSTIterator struct {
	stack []int
}

func Constructor(root *TreeNode) BSTIterator {
	tmp := make([]*TreeNode,0)
	num := make([]int,0)
	for root != nil || len(tmp)>0{
		for root!= nil{
			tmp = append(tmp,root)
			root = root.Left
		}
		root = tmp[len(tmp)-1]
        tmp=tmp[:len(tmp)-1]
		num = append(num,root.Val)
		root = root.Right
	}
	res := BSTIterator{stack:num}
	return res
}


/** @return the next smallest number */
func (this *BSTIterator) Next() int {
	res := this.stack[0]
	this.stack =  this.stack[1:]
	return res
}


/** @return whether we have a next smallest number */
func (this *BSTIterator) HasNext() bool {
	return len(this.stack)>0
}


type BSTIterator struct {
	list []*TreeNode
	cur  *TreeNode
}


func Constructor(root *TreeNode) BSTIterator {
	return BSTIterator{
		list: make([]*TreeNode,0),
		cur : root,
	}
}


/** @return the next smallest number */
func (this *BSTIterator) Next() int {
	res := -1
	for this.HasNext(){

		if this.cur!=nil{
			this.list = append(this.list,this.cur)
			this.cur = this.cur.Left
		}else {
			this.cur = this.list[len(this.list)-1]
			this.list = this.list[:len(this.list)-1]
			res = this.cur.Val
			this.cur = this.cur.Right
			break
		}
	}
	return res
}


/** @return whether we have a next smallest number */
func (this *BSTIterator) HasNext() bool {
		return len(this.list) > 0 || this.cur != nil
}

type BSTIterator struct {
	stack []*TreeNode
}


func Constructor(root *TreeNode) BSTIterator {
	tmp := make([]*TreeNode,0)
	res := BSTIterator{stack:tmp}
	res.push(root)
	return res
}


/** @return the next smallest number */
func (this *BSTIterator) Next() int {
	root := this.stack[len(this.stack)-1]
	this.stack = this.stack[:len(this.stack)-1]
	result := root.Val
	this.push(root.Right)
	return result
}


/** @return whether we have a next smallest number */
func (this *BSTIterator) HasNext() bool {
	return len(this.stack)>0
}

func (this *BSTIterator) push(root *TreeNode) {
	for root != nil {
		this.stack = append(this.stack, root)
		root = root.Left
	}
}


