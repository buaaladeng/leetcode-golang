给定一个包含 n + 1 个整数的数组 nums，其数字都在 1 到 n 之间（包括 1 和 n），可知至少存在一个重复的整数。假设只有一个重复的整数，找出这个重复的数。

示例 1:

输入: [1,3,4,2,2]
输出: 2
示例 2:

输入: [3,1,3,4,2]
输出: 3
说明：

不能更改原数组（假设数组是只读的）。
只能使用额外的 O(1) 的空间。
时间复杂度小于 O(n2) 。
数组中只有一个重复的数字，但它可能不止重复出现一次。


1,暴力法，时间复杂度，O(N2)
func findDuplicate(nums []int) int {
	n := len(nums)
	for i:=0;i<n;i++{
		for j:=i+1;j<n;j++{
			if nums[i] == nums[j]{
				return nums[i];
			}
		}
	}
	return -1
}
2,二分搜索法
func findDuplicate(nums []int) int {
	n := len(nums)
	left := 1
	right := n-1
	for left < right{
		count := 0
		mid := (left+right)/2
		for i:=0;i<n;i++{
			if nums[i]<=mid{
				count++
			}
		}
		if count>mid{
			right = mid
		}else {
			left = mid+1
		}
	}
	return left
}
3，快慢指针法
func findDuplicate(nums []int) int {
	slow := nums[0]
	fast:= nums[nums[0]]
	for slow != fast{
		slow = nums[slow]
		fast = nums[nums[fast]]
	}
	p1 :=0
	p2 := slow
	for p1 != p2{
		p1 = nums[p1]
		p2 = nums[p2]
	}
	return p1
}

