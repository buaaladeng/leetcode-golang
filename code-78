
func subsets(nums []int) [][]int {
	res := make([][]int,0)
	n := len(nums)
	if n == 0{
		return res
	}
	if n == 1{
		res = append(res,nums)
		res= append(res,make([]int,0))
		return res
	}
	one := nums[n-1]
	nums = nums[:n-1]
	sub := subsets(nums)
	for _,tmp := range sub{
		if len(tmp)>0{
			res = append(res,tmp)
		}
		tmp = append(tmp,one)
		one := make([]int,len(tmp))
		copy(one,tmp)
		res = append(res,one)
	}
	res = append(res,make([]int,0))
	return res
}

func subsets(nums []int) [][]int {
	result := make([][]int,1)
	for _,n :=range nums{
		for _,r:= range result{
			result = append(result, append([]int{n}, r...))
		}
	}
	return result

}

func subsets(nums []int) [][]int {
	res := make([][]int,0)
	n := len(nums)
	if n == 0{
		return res
	}
	sort.Ints(nums)
	tmp := make([]int,0)
	dfs78(nums,&res,tmp,0)
	return res
}
func dfs78(nums []int,res *[][]int,tmp []int,start int)  {
	one := make([]int,len(tmp))
	copy(one,tmp)
	*res = append(*res,one)
	for i:=start;i<len(nums);i++{
		tmp = append(tmp,nums[i])
		dfs78(nums,res,tmp,i+1)
		tmp = tmp[:len(tmp)-1]
	}
}
