func maximalSquare(matrix [][]byte) int {
	m := len(matrix)
	if m == 0{
		return 0
	}
	n := len(matrix[0])
	if n == 0{
		return 0
	}
	res := 0
	dp := make([][]int,m)
	for i:=0;i<m;i++{
		dp[i] = make([]int,n)
		if matrix[i][0] == '1'{
			dp[i][0] = 1
			res = 1
		}else {
			dp[i][0] = 0
		}
	}
	for i:=0;i<n;i++{
		if matrix[0][i] == '1'{
			dp[0][i] = 1
			res = 1
		}else {
			dp[0][i] = 0
		}
	}
	for i:=1;i<m;i++{
		for j:=1;j<n;j++{
			if matrix[i][j] == '0'{
				dp[i][j] = 0
			} else {
				m1 := minInt(dp[i-1][j], dp[i][j-1])
				dp[i][j] = minInt(m1,dp[i-1][j-1])+1
			}
			res = maxInt(dp[i][j], res)
		}
	}
	return res * res
}

func maxInt(a,b int) int{
	if a<b{
		a = b
	}
	return a
}

func minInt(a,b int) int{
	if a>b{
		a = b
	}
	return a
}





func maximalSquare(matrix [][]byte) int {
	m := len(matrix)
	if m == 0{
		return 0
	}
	n := len(matrix[0])
	if n == 0{
		return 0
	}
	res := 0
	dp := make([]int,n+1)
	pre := 0
	for i:=1;i<=m;i++{
		for j:=1;j<=n;j++{
			tmp := dp[j]
			if matrix[i-1][j-1] == '0'{
				dp[j] = 0
			} else {
				m1 := minInt(dp[j], dp[j-1])
				dp[j] = minInt(m1,pre)+1
			}
			res = maxInt(dp[j], res)
			pre = tmp
		}
	}
	return res * res
}

