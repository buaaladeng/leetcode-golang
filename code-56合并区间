给出一个区间的集合，请合并所有重叠的区间。

示例 1:

输入: [[1,3],[2,6],[8,10],[15,18]]
输出: [[1,6],[8,10],[15,18]]
解释: 区间 [1,3] 和 [2,6] 重叠, 将它们合并为 [1,6].
示例 2:

输入: [[1,4],[4,5]]
输出: [[1,5]]
解释: 区间 [1,4] 和 [4,5] 可被视为重叠区间。


//本题主要是排序比较重要

func merge(intervals [][]int) [][]int {
	m :=len(intervals)
	res := make([][]int,0)
	if m == 0{
		return res
	}
	intervals = sort56(intervals)
	tmp := intervals[0]
	for i:=1;i<len(intervals);i++{
		now := intervals[i]
		if now[0] > tmp[1]{
			res = append(res,tmp)
			tmp = now
		}else {
			tmp[1] = maxInt(tmp[1],now[1])
		}
	}
	res = append(res,tmp)
	return res
}

func sort56(intervals [][]int)[][]int{
	res := make([][]int,0)
	for len(intervals)>0{
		min := math.MaxInt32
		index:=0
		for i:=0;i<len(intervals);i++{
			if intervals[i][0]<min{
				min = intervals[i][0]
				index = i
			}
		}
		res = append(res,intervals[index])
		intervals = append(intervals[:index],intervals[index+1:]...)
	}
	return res
}

func maxInt(a,b int)int{
	if a>b{
		return a
	}else {
		return b
	}
}


// 别人写的排序
type ByX [][]int

func (b ByX) Len() int {
	return len(b)
}

func (b ByX) Swap(i, j int) {
	b[i], b[j] = b[j], b[i]
}

func (b ByX) Less(i, j int) bool{
	return b[i][0] < b[j][0]
}

func merge(intervals [][]int) [][]int {
	res := make([][]int,0)
	row := len(intervals)
	if row == 0{
		return res
	}
	if row == 1{
		return intervals
	}
	sort.Sort(ByX(intervals))
	pre := intervals[0]
	for i:=1;i<row;i++{
		cur := intervals[i]
		if cur[0] > pre[1]{
			res = append(res,pre)
			pre = cur
		}else if  cur[0] <= pre[1] && cur[1]>=pre[0]{
			tmp := make([]int,0)
			tmp = append(tmp, minInt(pre[0],cur[0]))
			tmp = append(tmp, maxInt(pre[1],cur[1]))
			pre = tmp
		}else {
			res = append(res,cur)
		}
	}
	res = append(res,pre)
	return res

}

func maxInt(a,b int)int{
	if a>b{
		return a
	}else {
		return b
	}
}

func minInt(a,b int)int{
	if a>b{
		return b
	}else {
		return a
	}
}
