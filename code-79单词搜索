给定一个二维网格和一个单词，找出该单词是否存在于网格中。

单词必须按照字母顺序，通过相邻的单元格内的字母构成，其中“相邻”单元格是那些水平相邻或垂直相邻的单元格。同一个单元格内的字母不允许被重复使用。

 

示例:

board =
[
  ['A','B','C','E'],
  ['S','F','C','S'],
  ['A','D','E','E']
]

给定 word = "ABCCED", 返回 true
给定 word = "SEE", 返回 true
给定 word = "ABCB", 返回 false
 

提示：

board 和 word 中只包含大写和小写英文字母。
1 <= board.length <= 200
1 <= board[i].length <= 200
1 <= word.length <= 10^3


func exist(board [][]byte, word string) bool {
	n := len(board)
	if n == 0 {
		return false
	}
	m := len(board[0])
	if m == 0 {
		return false
	}
	if len(word) == 0{
		return false
	}
	for i:=0;i<n;i++{
		for j:=0;j<m;j++{
			if dfs79(board,i,j,word,0){
				return true
			}
		}
	}
	return false
}

func dfs79(board [][]byte,i int,j int,word string,start int)bool{
	row := len(board)
	col := len(board[0])
	if start == len(word){
		return true
	}
	if i<0 || i>=row || j<0 || j>= col|| board[i][j] != word[start]{
		return false
	}
	tmp:=board[i][j]
	board[i][j] = 0
	if dfs79(board,i+1,j,word,start+1) || dfs79(board,i-1,j,word,start+1) ||
		dfs79(board,i,j+1,word,start+1) || dfs79(board,i,j-1,word,start+1){
			return true
	}
	board[i][j] = tmp
	return false
}
