给定一个二叉树，检查它是否是镜像对称的。

 

例如，二叉树 [1,2,2,3,4,4,3] 是对称的。

    1
   / \
  2   2
 / \ / \
3  4 4  3
 

但是下面这个 [1,2,2,null,3,null,3] 则不是镜像对称的:

    1
   / \
  2   2
   \   \
   3    3
 

进阶：

你可以运用递归和迭代两种方法解决这个问题吗？


//递归
func isSymmetric(root *TreeNode) bool {
	if root == nil{
		return true
	}
	return symmetric(root.Left,root.Right)
}
func symmetric(left,right *TreeNode) bool{
	if left == nil && right == nil{
		return true
	}
	if left == nil || right == nil{
		return false
	}
	return left.Val == right.Val && symmetric(left.Left,right.Right) &&
		symmetric(left.Right,right.Left)
}

//迭代
func isSymmetric(root *TreeNode) bool {
	if root == nil{
		return true
	}
	stack:=make([]*TreeNode,0)
	stack = append(stack,root)
	stack = append(stack,root)
	for len(stack)>0{
		left:=stack[len(stack)-1]
		stack = stack[:len(stack)-1]
		right:=stack[len(stack)-1]
		stack = stack[:len(stack)-1]
		if left == nil && right == nil{
			continue
		}
		if left == nil || right == nil{
			return false
		}
		if left.Val != right.Val{
			return false
		}
		stack = append(stack,left.Left)
		stack = append(stack,right.Right)
		stack = append(stack,left.Right)
		stack = append(stack,right.Left)
	}
	return true

}
