递归方法：

（1）中序

func inorderTraversal(root *TreeNode) []int {
	res := make([]int,0)
	if root == nil{
		return res
	}
	res = append(res,inorderTraversal(root.Left)...)
	res = append(res,root.Val)
	res = append(res,inorderTraversal(root.Right)...)
	return res
}


（2）前序

func preorderTraversal(root *TreeNode) []int {
	res := make([]int,0)
	if root == nil{
		return res
	}
	res = append(res,root.Val)
	res = append(res,preorderTraversal(root.Left)...)
	res = append(res,preorderTraversal(root.Right)...)
	return res
}

（3）后序
func postorderTraversal(root *TreeNode) []int {
	res := make([]int,0)
	if root == nil{
		return res
	}
	res = append(res,postorderTraversal(root.Left)...)
	res = append(res,postorderTraversal(root.Right)...)
	res = append(res,root.Val)
	return res
}


迭代方法：
（1）中序

func inorderTraversal(root *TreeNode) []int {
	res := make([]int,0)
	stack := make([]*TreeNode,0)
	if root == nil{
		return res
	}
	for root != nil || len(stack)>0{
		for root!= nil{
			stack = append(stack,root)
			root = root.Left
		}
		root = stack[len(stack)-1]
		stack = stack[:len(stack)-1]
		res = append(res,root.Val)
		root = root.Right
	}
	return res
}

（2）前序

func preorderTraversal(root *TreeNode) []int {
	res := make([]int,0)
	stack := make([]*TreeNode,0)
	if root == nil{
		return res
	}
	for root != nil || len(stack)>0{
		for root!= nil{
			res = append(res,root.Val)
			stack = append(stack,root)
			root = root.Left
		}
		root = stack[len(stack)-1]
		stack = stack[:len(stack)-1]
		root = root.Right
	}
	return res
}


（3）后序
func postorderTraversal(root *TreeNode) []int {
	res := make([]int,0)
	stack := make([]*TreeNode,0)
	if root == nil{
		return res
	}
	last := new(TreeNode)
	for root != nil || len(stack)>0{
		for root!= nil{
			stack = append(stack,root)
			root = root.Left
		}
		root = stack[len(stack)-1]
		if root.Right == last || root.Right == nil{
			res = append(res,root.Val)
			stack = stack[:len(stack)-1]
			last = root
			root = nil
		}else {
			root = root.Right
		}
	}
	return res
}
