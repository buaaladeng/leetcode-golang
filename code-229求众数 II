给定一个大小为 n 的数组，找出其中所有出现超过 ⌊ n/3 ⌋ 次的元素。

说明: 要求算法的时间复杂度为 O(n)，空间复杂度为 O(1)。

示例 1:

输入: [3,2,3]
输出: [3]
示例 2:

输入: [1,1,1,3,3,2,2,2]
输出: [1,2]


func majorityElement(nums []int) []int {
	res := make([]int,0)
	n := len(nums)
	if n == 0{
		return res
	}
	n1 := nums[0]
	n2 := nums[0]
	c1 := 0
	c2 := 0
	for i:=0;i<n;i++{
		if nums[i] == n1{
			c1++
		}else if nums[i] == n2{
			c2++
		}else if c1 == 0{
			n1 = nums[i]
			c1=1
		}else if c2 == 0{
			n2 = nums[i]
			c2=1
		} else {
			c1--
			c2--
		}
	}
    
	c1=0
	c2=0
	for i:=0;i<n;i++{
		if nums[i] == n1{
			c1++
		}else if nums[i] == n2{
			c2++
		}
	}
	if c1 > n/3{
		res = append(res,n1)
	}
	if c2 > n/3{
		res = append(res,n2)
	}
	return res
}
