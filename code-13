func romanToInt(s string) int {
	numMap := make(map[string]int)
	numMap["I"] = 1
	numMap["IV"] = 4
	numMap["V"] = 5
	numMap["IX"] = 9
	numMap["X"] = 10
	numMap["XL"] = 40
	numMap["L"] = 50
	numMap["XC"] = 90
	numMap["C"] = 100
	numMap["CD"] = 400
	numMap["D"] = 500
	numMap["CM"] = 900
	numMap["M"] = 1000
	n := len(s)
	array := []byte(s)
	res := 0
	start := 0
	for start < n {
		end := start + 2
		if end >= n {
			end = n
		}
		if val,ok := numMap[string(array[start:end])];ok{
			res += val
			start = end
			continue
		}
		val,_:= numMap[string(array[start:start+1])]
		res += val
		start++
	}
	return res
}



func romanToInt(s string) int {
	n := len(s)
	array := []byte(s)
	res := 0
	index := n-1
	for index>=0{
		oneByte := array[index]
		switch oneByte {
		case 'V':
			res += 5
			break
		case 'L':
			res += 50
			break
		case 'D':
			res += 500
			break
		case 'M':
			res += 1000
			break
		case 'I':
			if res >= 5{
				res -= 1
			}else {
				res += 1
			}
			break
		case 'X':
			if res >= 50{
				res -= 10
			}else {
				res += 10
			}
			break
		case 'C':
			if res >= 500{
				res -= 100
			}else {
				res += 100
			}
			break
		default:
			break
		}
		index--
	}
	return res
}



func romanToInt(s string) int {
	res := 0
	m := map[byte]int{
		'I': 1,
		'V': 5,
		'X': 10,
		'L': 50,
		'C': 100,
		'D': 500,
		'M': 1000,
	}

	last := 0
	for i := len(s) - 1; i >= 0; i-- {
		temp := m[s[i]]

		sign := 1
		if temp < last {
			//小数在大数的左边，要减去小数
			sign = -1
		}

		res += sign * temp

		last = temp
	}

	return res
}
