实现一个 Trie (前缀树)，包含 insert, search, 和 startsWith 这三个操作。

示例:

Trie trie = new Trie();

trie.insert("apple");
trie.search("apple");   // 返回 true
trie.search("app");     // 返回 false
trie.startsWith("app"); // 返回 true
trie.insert("app");   
trie.search("app");     // 返回 true
说明:

你可以假设所有的输入都是由小写字母 a-z 构成的。
保证所有输入均为非空字符串。


type Trie struct {
	array [26]*Trie
	end bool

}


/** Initialize your data structure here. */
func Constructor() Trie {
	return Trie{}
}


/** Inserts a word into the trie. */
func (this *Trie) Insert(word string)  {
	n:=len(word)
	root := this
	for i:=0;i<n;i++{
		if root.array[word[i] - 'a'] == nil{
			root.array[word[i] - 'a'] = new(Trie)
		}
		root = root.array[word[i] - 'a']
	}
	root.end = true
}


/** Returns if the word is in the trie. */
func (this *Trie) Search(word string) bool {
	n:=len(word)
	root := this
	for i:=0;i<n;i++{
		if root.array[word[i] - 'a'] == nil{
			return false
		}
		root = root.array[word[i] - 'a']
	}
	return  root.end == true
}


/** Returns if there is any word in the trie that starts with the given prefix. */
func (this *Trie) StartsWith(prefix string) bool {
	n:=len(prefix)
	root := this
	for i:=0;i<n;i++{
		if root.array[prefix[i] - 'a'] == nil{
			return false
		}
		root = root.array[prefix[i] - 'a']
	}
	return true
}
