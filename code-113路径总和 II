给定一个二叉树和一个目标和，找到所有从根节点到叶子节点路径总和等于给定目标和的路径。

说明: 叶子节点是指没有子节点的节点。

示例:
给定如下二叉树，以及目标和 sum = 22，

              5
             / \
            4   8
           /   / \
          11  13  4
         /  \    / \
        7    2  5   1
返回:

[
   [5,4,11,2],
   [5,8,4,5]
]


func pathSum(root *TreeNode, sum int) [][]int {
	res := make([][]int,0)
	if root == nil{
		return res
	}
	tmp := make([]int,0)
	dfs113(root,sum,&res,tmp)
	return res
}

func dfs113(root *TreeNode,sum int, res *[][]int, tmp []int){
	if root == nil{
		return
	}
	tmp = append(tmp,root.Val)
	if sum == root.Val && root.Right == nil && root.Left == nil{
		one := make([]int,len(tmp))
		copy(one,tmp)
		*res = append(*res,one)
	}else {
		dfs113(root.Left,sum-root.Val,res,tmp)
		dfs113(root.Right,sum-root.Val,res,tmp)
	}
	tmp = tmp[:len(tmp)-1]
}
