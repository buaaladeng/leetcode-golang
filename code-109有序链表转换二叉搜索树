给定一个单链表，其中的元素按升序排序，将其转换为高度平衡的二叉搜索树。

本题中，一个高度平衡二叉树是指一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过 1。

示例:

给定的有序链表： [-10, -3, 0, 5, 9],

一个可能的答案是：[0, -3, 9, -10, null, 5], 它可以表示下面这个高度平衡二叉搜索树：

      0
     / \
   -3   9
   /   /
 -10  5


func sortedListToBST(head *ListNode) *TreeNode {
	root := new(TreeNode)
	if head == nil{
		return nil
	}
	if head.Next == nil{
		root.Val = head.Val
		return root
	}
	fast := head
	slow := head
	for fast!=nil && fast.Next!=nil{
		slow = slow.Next
		fast = fast.Next.Next
	}
	pre := head
	for pre.Val !=slow.Val && pre.Next.Val!=slow.Val {
		pre = pre.Next
	}
	pre.Next = nil
	root.Val = slow.Val
	root.Right = sortedListToBST(slow.Next)
	root.Left = sortedListToBST(head)
	return root
}




func sortedListToBST(head *ListNode) *TreeNode {
	return transMidToRoot(head, nil)
}

func transMidToRoot(begin, end *ListNode) *TreeNode {
	if begin == end {
		return nil
	}

	if begin.Next == end {
		return &TreeNode{Val: begin.Val}
	}

	fast, slow := begin, begin
	for fast != end && fast.Next != end {
		fast = fast.Next.Next
		slow = slow.Next
	}

	mid := slow

	return &TreeNode{
		Val:   mid.Val,
		Left:  transMidToRoot(begin, mid),
		Right: transMidToRoot(mid.Next, end),
	}
}

