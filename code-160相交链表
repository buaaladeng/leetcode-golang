编写一个程序，找到两个单链表相交的起始节点。

如下面的两个链表：



在节点 c1 开始相交。

 

示例 1：



输入：intersectVal = 8, listA = [4,1,8,4,5], listB = [5,0,1,8,4,5], skipA = 2, skipB = 3
输出：Reference of the node with value = 8
输入解释：相交节点的值为 8 （注意，如果两个列表相交则不能为 0）。从各自的表头开始算起，链表 A 为 [4,1,8,4,5]，链表 B 为 [5,0,1,8,4,5]。在 A 中，相交节点前有 2 个节点；在 B 中，相交节点前有 3 个节点。
 

示例 2：



输入：intersectVal = 2, listA = [0,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1
输出：Reference of the node with value = 2
输入解释：相交节点的值为 2 （注意，如果两个列表相交则不能为 0）。从各自的表头开始算起，链表 A 为 [0,9,1,2,4]，链表 B 为 [3,2,4]。在 A 中，相交节点前有 3 个节点；在 B 中，相交节点前有 1 个节点。
 

示例 3：



输入：intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2
输出：null
输入解释：从各自的表头开始算起，链表 A 为 [2,6,4]，链表 B 为 [1,5]。由于这两个链表不相交，所以 intersectVal 必须为 0，而 skipA 和 skipB 可以是任意值。
解释：这两个链表不相交，因此返回 null。
 

注意：

如果两个链表没有交点，返回 null.
在返回结果后，两个链表仍须保持原有的结构。
可假定整个链表结构中没有循环。
程序尽量满足 O(n) 时间复杂度，且仅用 O(1) 内存。

func getIntersectionNode(headA, headB *ListNode) *ListNode {
	p1 := headA
	p2 := headB
	n := 1
	m := 1
	for p1!=nil && p1.Next != nil{
		p1 = p1.Next
		n++
	}
	for p2!=nil && p2.Next != nil{
		p2 = p2.Next
		m++
	}
	if p1 != p2{
		return nil
	}
    p1 = headA
    p2 = headB
	if n<m{
	p1 = headB
    p2 = headA
    n,m = m,n
	}
	for i:=0;i<n-m;i++{
    
		p1 = p1.Next
	}
	for p1!=p2{
		p1 = p1.Next
		p2 = p2.Next
	}
	return p1

}

func getIntersectionNode(headA, headB *ListNode) *ListNode {
	if headA == nil ||  headB == nil{
		return nil
	}
	 p,q := headA,headB
	 pflag,qflag := false,false
	 for p != nil && q != nil{
	 	if p == q{
	 		return p
		}
        p = p.Next
	 	q = q.Next
	 	if p == nil && !pflag{
	 		p = headB
			pflag = true
		}
	 	if q == nil && !qflag{
	 		q = headA
	 		qflag = true
		}
	 }
	 return nil
}

func getIntersectionNode(headA, headB *ListNode) *ListNode {
	p1 := headA
	p2 := headB
    if p1 ==nil || p2 == nil{
        return nil
    }
	for p1!=p2{
		p1 = p1.Next
		p2 = p2.Next
		if p1 == nil && p2 == nil{
			return nil
		}
		if p1 == nil{
			p1 = headB
		}
		if p2 == nil{
			p2 = headA
		}
	}
	return p1
}

