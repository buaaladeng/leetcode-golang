func binaryTreePaths(root *TreeNode) []string {
	res := make([]string,0)
	if root == nil{
		return res
	}
	left := binaryTreePaths(root.Left)
	right := binaryTreePaths(root.Right)
	if len(left) ==0 && len(right) == 0{
		res = append(res,strconv.Itoa(root.Val)) 
	} else {
		for _, one := range left {
			res = append(res, strconv.Itoa(root.Val)+"->"+one)
		}
		for _, one := range right {
			res = append(res, strconv.Itoa(root.Val)+"->"+one)
		}
	}
	return res
}


func binaryTreePaths(root *TreeNode) []string {
	result := construct(root,"")
	return result
}
func construct(root *TreeNode,path string) []string {
	paths:= make([]string,0)
	if root != nil{
		path += strconv.Itoa(root.Val)
		if root.Right == nil && root.Left == nil{
			paths = append(paths, path)
		}else {
			path += "->"
			first := construct(root.Left,path)
			paths = append(paths,first...)
			second := construct(root.Right,path)
			paths = append(paths,second...)
		}
		fmt.Println(paths)
		
	}
	return paths
}






func binaryTreePaths(root *TreeNode) []string {
	res := make([]string,0)
	if root == nil{
		return res
	}
	res = dfs257(root,"")
	return res
}

func dfs257(root *TreeNode,str string)[]string{
	res := make([]string,0)
	if str ==""{
		str += strconv.Itoa(root.Val)
	}else {
		str += "->" + strconv.Itoa(root.Val)
	}
	if root.Left == nil && root.Right == nil{
		res = append(res,str)
	}else {
		left := dfs257(root.Left,str)
		right := dfs257(root.Right,str)
		res = append(res,left...)
		res = append(res,right...)
	}
	return res
}
